hola("Ernesto")
hola = function(nombre){
# Este es un saludo
print('Hola',nombre,'. Cómo estás hoy?')
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy?') )
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy\?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(paste('Hola',nombre,'. Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(paste('Hola',nombre,'Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
help(for (variable in vector) {
})
newMatrix(3, 5, 1)
newMatrix = function(f,c,n){
matriz = matrix(n, nrow=f, ncol = c)
return(matriz)
}
newMatrix(3, 5, 1)
# Ejemplos de este tipo de sentencias son los siguientes:
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
x = 40
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else if(x == 40){
print("X es igual a 40")
}
n = 10
while (n > 0){
print(n)
n = n-1
}
print('¡Despegue!')
while(TRUE){
print(n)
n = n-1
}
print('¡Terminado!')
contador = 0
for (valor in listaN){
contador = contador + 1
}
print(paste('Num. elementos: ', contador))
## Clase 1
# Data Frame
data = data.frame(Nombre = c('Andres', 'Camilo', 'Laura', 'Daniela'), Edad = c(20, 21, 19, 18))
sapply(data, class)
head(data)
columns(data)
colnames(data)
row.names(data)
seq(2,6)
row.names(df) <- seq(2,6)
row.names(df)
row.names(df)
## Otro data frame
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
## Clase 1
# Data Frame
data = data.frame(Nombre = c('Andres', 'Camilo', 'Laura', 'Daniela'), Edad = c(20, 21, 19, 18))
sapply(data, class)
head(data)
colnames(data)
row.names(data)
## Otro data frame
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
d
df
df$Sexo = as.character(df$Sexo)
sapply(data, class)
colnames(df) <- c('Name','Age','City','Sex')
row.names(df) <- seq(2,6)
row.names(df)
seq(2,6)
row.names(df) <- seq(2,5)
colnames(df)
row.names(df)
row.names(df) <- c('Maria', 'Carlos', 'Juan', 'Lorena')
row.names(df)
df
df[1,:]
df[1,]
df$Age
df[,c('Age')]
df[1,]
df[c('Juan'),]
df = rbind(df[2,])
df
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
## Transformemos el campo sexo a dato categórico
df$Sexo = as.character(df$Sexo)
sapply(data, class)
colnames(df) <- c('Name','Age','City','Sex')
row.names(df) <- seq(2,5)
colnames(df)
row.names(df)
row.names(df) <- c('Maria', 'Carlos', 'Juan', 'Lorena')
row.names(df)
df
df$Age
df[,c('Age')]
df[1,]
df[c('Juan'),]
df = rbind(df,df[2,])
df
df[,c('Hijos')] =c(1,2,4,1,0,3)
df[,c('Hijos')] =c(1,2,4,1,0)
source('~/.active-rstudio-document')
rm(list = ls())
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df2 = df
# Eliminemos la columna por su etiqueta
df2[,-c('Ciudad')]
df2 = df
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df2 = df
# Eliminemos la columna por su etiqueta
df2[,-c('Ciudad')]
# Eliminemos la columna por su posición
df2[,-c(3)]
# Eliminemos la columna por su etiqueta
df2[,-'Ciudad']
# Eliminemos la columna por su etiqueta
df2[,rev('Ciudad')]
# Eliminemos la columna por su etiqueta
df2[,remove('Ciudad')]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad")]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad"))]
# Eliminemos la columna por su posición
df2[,-c(3)]
df2[-c('2'),]
df2[which(names(df) %in% c("2")),]
df2[which(row.names(df) %in% c("2")),]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad"))]
df2[-which(row.names(df) %in% c("2")),]
df2[-2,]
df[3,4]
df["Juan",'Sexo']
df
df["1",'Sexo']
df["3",'Sexo']
df[3,4]
df["3",'Sexo']
df[3,'Sexo']
df["3",4]
df$Edad <- seq(20,30,dim(df)[1])
dim(df)[1]
dim(df)
seq(20,30,dim(df)[1])
df$Edad <- seq(20,32,dim(df)[1])
df['Calificación'] = c('+3.5A','-2.4v','*1.5d','%5.0B')
print(df,"\n")
df
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub(c('+','-','*','%'),"",df$Calificación))
help(gsub)
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(sub(c('+','-','*','%'),"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(grep(c('+','-','*','%'),"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(grep(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gregexpr(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(regexpr(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(regexec(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('+',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
df
df['Calificación'] = c('+3.5A','-2.4v','*1.5d','%5.0B')
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('+',"",df$Calificación))
df$Calificación <- as.character(gsub('*',"",df$Calificación))
df$Calificación <- as.character(gsub('%',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
df
df$Calificación <- as.character(gsub('\+',"",df$Calificación))
df$Calificación <- as.character(gsub('\*',"",df$Calificación))
df$Calificación <- as.character(gsub('%',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('\\+',"",df$Calificación))
df$Calificación <- as.character(gsub('\*',"",df$Calificación))
df$Calificación <- as.character(gsub('\\*',"",df$Calificación))
df
df$Calificación <- as.character(gsub('A',"",df$Calificación))
df$Calificación <- as.character(gsub('v',"",df$Calificación))
df$Calificación <- as.character(gsub('d',"",df$Calificación))
df$Calificación <- as.character(gsub('B',"",df$Calificación))
df
df$Calificación <- as.character(gsub('[[:alpha:]]',"",df$Calificación))
df
df$Calificación <- as.character(gsub('[[:alpha:]]',"",df$Calificación))
df
tan(1)
arc(1)
arctan(1)
tanpi(1)
tanpi(2)
tanpi(2pi)
ejemplo <- 'abcde'
substr(ejemplo,1,2)
a = eye
a = diag(4)
a = diag(4)
for(i in 1:3){
j = i + 1
print(a[i+1,j])
}
a = diag(4)
for(i in 1:3){
for(j in 1:3){
print(a[i,j])
}
}
df <- data.frame(a = c(1,1,2,2,1,1,1))
df
if (df$a == 1){
df$b <- "ejemplo"
}else{
df$b <- "no ejemplo"
}
if (df[1,1] == 1){
df$b <- "ejemplo"
}else{
df$b <- "no ejemplo"
}
View(df)
df <- data.frame(a = c(1,1,2,2,1,1,1))
if (df[1,1] == 1){
df[1,1]  <- "ejemplo"
}else{
df[1,1]  <- "no ejemplo"
}
View(a)
df <- data.frame(a = c(1,1,2,2,1,1,1))
if (df[1,1] == 1){
df[1,2]  <- "ejemplo"
}else{
df[1,2]  <- "no ejemplo"
}
View(df)
df <- data.frame(a = c(1,1,2,2,1,1,1))
for(i in 1:7){
if (df[1,1] == 1){
df[1,2]  <- "ejemplo"
}else{
df[1,2]  <- "no ejemplo"
}
}
df <- data.frame(a = c(1,1,2,2,1,1,1))
for(i in 1:7){
if (df[i,1] == 1){
df[i,2]  <- "ejemplo"
}else{
df[i,2]  <- "no ejemplo"
}
}
View(df)
factorial(100)
factorial(1000)
options(digits=10)
factorial(1000)
options(digits=100000)
options(digits=22)
factorial(1000)
factorial(100)
factorial(900)
factorial(200)
factorial(100)
factorial(180)
factorial(130)
factorial(150)
factorial(160)
factorial(170)
factorial(180)
factorial(177)
factorial(175)
factorial(172)
factorial(171)
factorial(170)
sprintf("%10f",factorial(170))
factorial(100)
sprintf("%10f",factorial(170))
factorial(1000)
sprintf("%10f",factorial(1000))
sprintf("%10f",factorial(100))
sprintf("%10f",factorial(200))
sprintf("%100f",factorial(200))
is.infinite(factorial(200))
setwd('/Users/bsmith/Documents/Introduction Machine Learning/Course/Introduction-to-Machine-Learning/Bases Taller 1')
base <- read.csv("empresas.csv", sep=";", stringsAsFactors = F)
econo <- read.csv("economicos.csv", sep=";", stringsAsFactors = F)
total = merge(x = base, y = econo, by = "NIT")
View(base)
View(econo)
base <- read.csv("empresas.csv",stringsAsFactors = F)
econo <- read.csv("economicos.csv", stringsAsFactors = F)
total = merge(x = base, y = econo, by = "NIT")
names(total)
sapply(total, class)
total = subset(total, MUNI_ID_DPTO = 85 )
View(total)
total = subset(total, MUNI_ID_DPTO == 85 )
View(total)
Utilidad.operacional<-as.numeric(econo$Utilidad.operacional)
View(Utilidad.operacional)
sprintf("%10f",factorial(170))
sprintf("%100f",factorial(170))
sprintf("%2f",factorial(170))
sprintf("%10000f",factorial(170))
sprintf("%8192f",factorial(170))
sprintf("%8192f",factorial(180))
Inf+0
as.character(Inf+0)
install.packages("Brobdingnag")
library("Brobdingnag")
as.brob(factorial(180))
10^as.brob(1000.7)
sprintf(as.brob(factorial(180)))
sprintf(as.brob(factorial(180)))
sprintf(as.numeric(as.brob(factorial(180))))
as.numeric(as.brob(factorial(180)))
prod(as.brob(factorial(180)))
as.numeric(prod(as.brob(factorial(180))))
as.numeric(prod(1:170))
as.numeric(prod(1:180))
factorial(10)
lfactorial(10)
install.packages("rSymPy")
library(rSymPy)
factorial.sympy <- function(n) sympy(paste("factorial(", n, ")"))
factorial.sympy(10)
factorial.sympy(100)
factorial.sympy(170)
factorial.sympy(180)
factorial.sympy(200)
factorial.sympy(500)
v1 = seq(27,600,3)
prod(v1)
tamano = 0; suma = 0; mult = 1
for(i in v1){
tamano = tamano+1
suma = suma+i
mult = mult*i
}
for(i in v1){
tamano = tamano+1
suma = suma+i
print(mult*i)
}
i
v1 = seq(27,600,3)
tamano = 0; suma = 0; mult = 1
for(i in v1){
tamano = tamano+1
suma = suma+i
print(mult*i)
}
v1 = seq(27,600,3)
tamano = 0; suma = 0; mult = 1
for(i in v1){
tamano = tamano+1
suma = suma+i
mult = mult*i
print(mult)
}
prod(1:3)
for(i in v1){
tamano = tamano+1
suma = suma+i
mult = mult*i
print(paste(i, mult))
}
v1 = seq(27,600,3)
tamano = 0; suma = 0; mult = 1
for(i in v1){
tamano = tamano+1
suma = suma+i
mult = mult*i
print(paste(i, mult))
}
v1 = seq(27,42,3)
library(rSymPy)
v1 = seq(27,42,3)
prod.sympy <- function(n) sympy(paste("prod(", n, ")"))
prod.sympy(v1)
prod.sympy(1)
sympy(paste("prod(", n, ")"))
sympy(paste("factorial(", 10, ")"))
prod(10)
sympy(paste("prod(", 10, ")"))
sympy("var('x')")
sympy(paste("var(", 10, ")"))
sympy(paste("y<-", n))
sympy(paste("y<-", 10))
sympy(paste("y =", 10))
sympy(paste("y =", 10*20))
sympy(paste("y =", 1000*20))
sympy(paste("y =", 9999990*20000000000000000000000000000000000))
tamano = 0; suma = 0; mult = 1
mult =sympy(paste("mult =", mult*20000000000000000000000000000000000))
mult
mult = as.numeric(mult)
source('~/.active-rstudio-document', echo=TRUE)
mult
sympy("diff(sin(2*x), x, 1)")
sympy("prod(",1:2,")")
sympy("prod(1:2)")
help("Var")
mult =sympy(paste("mult =", v1[1]*v1[2]))
sympy(paste("mult =", v1[1]*v1[2]))
n <- Var(10)
n
sympy(paste("mult =", n*v1[2]))
m <- sympy(paste("mult =", n*v1[2]))
n <- Var(m)
n
m <- sympy(paste("mult =", n*v1[2]))
library(rSymPy)
v1 = seq(27,600,3)
tamano = 0
suma = 0
mult = Var(1)
for(i in v1){
tamano = tamano+1
suma = suma+i
mult <- sympy(paste("mult =", mult*Var(i)))
}
mult
