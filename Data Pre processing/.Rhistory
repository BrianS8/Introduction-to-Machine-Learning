Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd+Option+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
rep(1,10)
replicate(10, rnorm(20))
matrix_num = replicate(10, rnorm(10))
matrix_num = replicate(10, rnorm(10))
matrix_str = matrix(vector_str, nrow = 3, ncol = 3)
vector_str = c('Ana','Maria','Laura','Andrea','Carolina','Sofia')
matrix_str = matrix(vector_str, nrow = 3, ncol = 3)
list(vector_num[1:5],vector_str[1:5])
## Definición de vectores
# Consiste en definir 2 vectores, uno string y otro númerico
vector_num = rep(1,10)
list(vector_num[1:5],vector_str[1:5])
list(vector_num[1:5],vector_str[1:5], TRUE)
vector = sample(-10,20,10)
vector
vector = sample(-10:20,10)
vector
length(vector)
for (i in 1:length(vector)){
print(i)
}
vector = sample(-10:20,10)
count_positive = 0
count_negative = 0
for (i in 1:length(vector)){
if(vector[i] > 0){
count_positive = count_positive + 1
} else {
count_negative = count_negative + 1
}
}
count_positive
count_negative
vector
for (i in 1:length(vector)){
if(vector[i] > 0){
print(round(vector[i]))
} else {
break
}
}
vector = sample(-10:20,10)
vector
for (i in 1:length(vector)){
if(vector[i] > 0){
print(round(vector[i]))
} else {
break
}
}
h >=0
h = 'jdjd'
h >=0
install.packages("dpylr")
library(dpylr)
install.packages("dplyr")
## Tipos de elementos en R
# Numeros
class(1)
class(1.0)
# Factor - Categoricos
class(factor(1))
# Booleanos
TRUE
FALSE
is.numeric(TRUE)
as.numeric(TRUE)
as.numeric(FALSE)
a = c(1,2,3,4,'ee')
# En este caso a es un vector string, que si lo transformamos en 1, tendríamos:
as.numeric(a)
b = list(c(1,2,3,4,'ee'),c(1,2,3,4))
b
2**3
3%2
### Vectores y matrices
## Vectores:
# En R podemos generar vectores numericos con la siguiente manera
vector1 = c(2,4,6,8,10)
vector2 = 2:2:10
vector3 = array(B)
vector4 = rep(1,5)
print(vector1,vector2,vector3,vector4)
B = c(1,2,3,4)
### Vectores y matrices
## Vectores:
# En R podemos generar vectores numericos con la siguiente manera
vector1 = c(2,4,6,8,10)
vector2 = 2:2:10
vector3 = array(B)
vector4 = rep(1,5)
print(vector1,vector2,vector3,vector4)
print(vector1)
print(vector2)
print(vector3)
print(vector4)
## Matrices
# En R podemos generar matrices de la siguiente manera
matriz1 = matrix(vector3, nrow = 2, ncol = 2)
# Podemos tomar un vector y hacer distintos tipos de indexación:
listaN = seq(1,20)
listaN
listaN[length(listaN)]
listaN[-1]
1:2:20
1:2:19
seq(1,19)
seq(1,19,2)
# Tomemos los numeros impares
listaN[seq(1,19,2)]
lista[::2]
lista[:,2]
# Seleccionemos los valores mayores a 10
listaN[listaN > 10]
# Reemplacemos un elemento
listaN[2] = 500
lista[2]
# Seleccionemos los valores mayores a 10
listaN[listaN > 10]
# Adicionemos un elemento
listaN[21] = 10
# Adicionemos un elemento
listaN[21] = 21
# Eliminemos el segundo elemento
listaN = listaN[-2]
source('~/.active-rstudio-document')
matriz2 = matrix(c(34,5,677),c(4,6,3),c(33,3,55)
)
matriz2
matriz2 = matrix(c(34,5,677,4,6,3,33,3,55), nrow = 3, ncol = 3)
matriz2
vector2 = c(2,7,8,5,0,2)
vector3 = c(4,76,87,45,44,33)
# Suma
print(vector2 + vector3)
# Resta
print(vector2 - vector3)
# Producto escalar
print(vector2 @ vector3)
# Producto escalar
print(vector2 * vector3)
# Producto escalar
print(vector2 ** vector3)
# Producto escalar
print(vector2 %*% vector3)
# Calcular la norma de un vector
print(sqrt(vector2 %*% vector2))
# Vectores ortogonales
v1 = c(3, 4)
v2 = c(4, -3)
print(v1 %*% v2)
# Creando una matriz identidad de 2x2
I = eye(3)
# Creando una matriz identidad de 2x2
I = diag(3)
print(I)
print(" ")
# Multiplicar una matriz por la identidad nos da la misma matriz
B = matriz2 %*% I
print(B)
matriz2
# Calculando el determinante de la matriz A
print(det(matriz2))
# Calculando la inversa de A.
matriz2_inv = solve(matriz2)
# A x A_inv nos da como resultado I.
print(matriz2 %*% matriz2_inv)
# Trasponiendo una matriz
matriz4 = t(matriz2)
print(matriz4)
tipear_nombre = function(nombre){
# Este es un saludo
print('Hola',nombre,'. Cómo estás hoy?')
}
hola = function(nombre){
# Este es un saludo
print('Hola',nombre,'. Cómo estás hoy?')
}
hola("Ernesto")
hola = function(nombre){
# Este es un saludo
print('Hola',nombre,'. Cómo estás hoy?')
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy?') )
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(cat('Hola',nombre,'. Cómo estás hoy\?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(paste('Hola',nombre,'. Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
hola = function(nombre){
# Este es un saludo
print(paste('Hola',nombre,'Cómo estás hoy?'))
}
hola(nombre = "Ernesto")
help(for (variable in vector) {
})
newMatrix(3, 5, 1)
newMatrix = function(f,c,n){
matriz = matrix(n, nrow=f, ncol = c)
return(matriz)
}
newMatrix(3, 5, 1)
# Ejemplos de este tipo de sentencias son los siguientes:
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
x = 40
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else if(x == 40){
print("X es igual a 40")
}
n = 10
while (n > 0){
print(n)
n = n-1
}
print('¡Despegue!')
while(TRUE){
print(n)
n = n-1
}
print('¡Terminado!')
contador = 0
for (valor in listaN){
contador = contador + 1
}
print(paste('Num. elementos: ', contador))
## Clase 1
# Data Frame
data = data.frame(Nombre = c('Andres', 'Camilo', 'Laura', 'Daniela'), Edad = c(20, 21, 19, 18))
sapply(data, class)
head(data)
columns(data)
colnames(data)
row.names(data)
seq(2,6)
row.names(df) <- seq(2,6)
row.names(df)
row.names(df)
## Otro data frame
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
## Clase 1
# Data Frame
data = data.frame(Nombre = c('Andres', 'Camilo', 'Laura', 'Daniela'), Edad = c(20, 21, 19, 18))
sapply(data, class)
head(data)
colnames(data)
row.names(data)
## Otro data frame
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = ('Bogota', 'Cali', 'Bucaramanga', NA))
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
d
df
df$Sexo = as.character(df$Sexo)
sapply(data, class)
colnames(df) <- c('Name','Age','City','Sex')
row.names(df) <- seq(2,6)
row.names(df)
seq(2,6)
row.names(df) <- seq(2,5)
colnames(df)
row.names(df)
row.names(df) <- c('Maria', 'Carlos', 'Juan', 'Lorena')
row.names(df)
df
df[1,:]
df[1,]
df$Age
df[,c('Age')]
df[1,]
df[c('Juan'),]
df = rbind(df[2,])
df
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
## Transformemos el campo sexo a dato categórico
df$Sexo = as.character(df$Sexo)
sapply(data, class)
colnames(df) <- c('Name','Age','City','Sex')
row.names(df) <- seq(2,5)
colnames(df)
row.names(df)
row.names(df) <- c('Maria', 'Carlos', 'Juan', 'Lorena')
row.names(df)
df
df$Age
df[,c('Age')]
df[1,]
df[c('Juan'),]
df = rbind(df,df[2,])
df
df[,c('Hijos')] =c(1,2,4,1,0,3)
df[,c('Hijos')] =c(1,2,4,1,0)
source('~/.active-rstudio-document')
rm(list = ls())
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df2 = df
# Eliminemos la columna por su etiqueta
df2[,-c('Ciudad')]
df2 = df
df = data.frame(
Nombre= c('Maria', 'Carlos', 'Juan', 'Lorena'),
Edad = c(27, 24, 22, 32),
Ciudad = c('Bogota', 'Cali', 'Bucaramanga', NA),
Sexo = c('F', 'M', 'M', 'F'))
df2 = df
# Eliminemos la columna por su etiqueta
df2[,-c('Ciudad')]
# Eliminemos la columna por su posición
df2[,-c(3)]
# Eliminemos la columna por su etiqueta
df2[,-'Ciudad']
# Eliminemos la columna por su etiqueta
df2[,rev('Ciudad')]
# Eliminemos la columna por su etiqueta
df2[,remove('Ciudad')]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad")]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad"))]
# Eliminemos la columna por su posición
df2[,-c(3)]
df2[-c('2'),]
df2[which(names(df) %in% c("2")),]
df2[which(row.names(df) %in% c("2")),]
# Eliminemos la columna por su etiqueta
df2[,-which(names(df) %in% c("Ciudad"))]
df2[-which(row.names(df) %in% c("2")),]
df2[-2,]
df[3,4]
df["Juan",'Sexo']
df
df["1",'Sexo']
df["3",'Sexo']
df[3,4]
df["3",'Sexo']
df[3,'Sexo']
df["3",4]
df$Edad <- seq(20,30,dim(df)[1])
dim(df)[1]
dim(df)
seq(20,30,dim(df)[1])
df$Edad <- seq(20,32,dim(df)[1])
df['Calificación'] = c('+3.5A','-2.4v','*1.5d','%5.0B')
print(df,"\n")
df
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub(c('+','-','*','%'),"",df$Calificación))
help(gsub)
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(sub(c('+','-','*','%'),"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(grep(c('+','-','*','%'),"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(grep(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gregexpr(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(regexpr(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(regexec(c('+','-','*','%'),c("","","",""),df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('+',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
df
df['Calificación'] = c('+3.5A','-2.4v','*1.5d','%5.0B')
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('+',"",df$Calificación))
df$Calificación <- as.character(gsub('*',"",df$Calificación))
df$Calificación <- as.character(gsub('%',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
df
df$Calificación <- as.character(gsub('\+',"",df$Calificación))
df$Calificación <- as.character(gsub('\*',"",df$Calificación))
df$Calificación <- as.character(gsub('%',"",df$Calificación))
df$Calificación <- as.character(gsub('-',"",df$Calificación))
# Eliminemos aquellos caracteres que hacen ruido
df$Calificación <- as.character(gsub('\\+',"",df$Calificación))
df$Calificación <- as.character(gsub('\*',"",df$Calificación))
df$Calificación <- as.character(gsub('\\*',"",df$Calificación))
df
df$Calificación <- as.character(gsub('A',"",df$Calificación))
df$Calificación <- as.character(gsub('v',"",df$Calificación))
df$Calificación <- as.character(gsub('d',"",df$Calificación))
df$Calificación <- as.character(gsub('B',"",df$Calificación))
df
df$Calificación <- as.character(gsub('[[:alpha:]]',"",df$Calificación))
df
df$Calificación <- as.character(gsub('[[:alpha:]]',"",df$Calificación))
df
# Librerías
library(xlsx)
library(dplyr)
f
# Eliminar duplicados y valores perdidos
df <- distinct(df)
df <- read.csv('movie.csv', sep = ";")
setwd("/Users/bsmith/Documents/Introduction Machine Learning/Course/Introduction-to-Machine-Learning/Data Pre processing")
df <- read.csv('movie.csv', sep = ";")
head(df)
# Eliminar duplicados y valores perdidos
df <- distinct(df)
df <- na.omit(df)
View(df)
summarise(df)
View(df)
summary(df)
View(df)
gdf <- group_by(df, release_year)
View(gdf)
summarise(gdf,num = n())
summarise(gdf,num = mean())
View(gdf)
names(df)
aggregate(df[,'ratingdescription'],by = list(df$release_year),FUN = mean)
install.packages('reshape')
df_melt = melt(df,id_vars =c('Name', 'Team'))
library(reshape)
df_melt = melt(df,id_vars =c('Name', 'Team'))
View(df_melt)
head(df_melt)
gdf = subset(df, Team == 'Boston Celtics' )
# Reshape
df <- read.csv('jugadores_nba.csv', sep = ";")
df_melt = melt(df,id_vars =c('Name', 'Team'))
head(df_melt)
gdf = subset(df, Team == 'Boston Celtics' )
gdf
gdf = subset(df, Team == 'Boston Celtics' & Position = 'PG')
gdf = subset(df, Team == 'Boston Celtics' & Position =+ 'PG')
gdf = subset(df, Team == 'Boston Celtics' & Position == 'PG')
gdf
install.packages('stringr')
library(stringr)
df <- read.csv('movie.csv', sep = ";")
head(df)
# Eliminar duplicados y valores perdidos
df <- distinct(df)
df <- na.omit(df)
summary(df)
str_split_fixed(df$group, ":", 2)
cbind(df,ndf)
ndf<-str_split_fixed(df$group, ":", 2)
cbind(df,ndf)
df[,-c('ratingdescription','release_year')]
