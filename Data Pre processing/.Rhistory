hola(nombre = "Ernesto")
help(for (variable in vector) {
})
newMatrix(3, 5, 1)
newMatrix = function(f,c,n){
matriz = matrix(n, nrow=f, ncol = c)
return(matriz)
}
newMatrix(3, 5, 1)
# Ejemplos de este tipo de sentencias son los siguientes:
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
x = 40
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else{
print("Por favor, intente de nuevo!")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}ifelse(x == 40){
print("X es igual a 40")
}
if (x > 10 & x < 20){
print("X se encuentra entre 10 y 20")
}else if(x == 40){
print("X es igual a 40")
}
n = 10
while (n > 0){
print(n)
n = n-1
}
print('¡Despegue!')
while(TRUE){
print(n)
n = n-1
}
print('¡Terminado!')
contador = 0
for (valor in listaN){
contador = contador + 1
}
print(paste('Num. elementos: ', contador))
getwd()
setwd("/Users/bsmith/Documents/")
getwd()
list.files()
setwd("/Users/bsmith/Documents/Introduction Machine Learning/Course")
list.files()
setwd("/Users/bsmith/Documents/Introduction Machine Learning/Course/Introduction-to-Machine-Learning")
list.files()
setwd("/Users/bsmith/Documents/Introduction Machine Learning/Course/Introduction-to-Machine-Learning/Data Pre processing")
list.files()
install.packages('xlsx')
### Clase 3 - Manejo de bases de datos
# Librerías
library(xlsx)
# Importar
df = read.xlsx('mpg.xlsx','HojaDatos')
list.files()
help("xlsx")
help("read.xlsx")
# Importar
df = read.xlsx('mpg.xlsx', sheetName='HojaDatos')
data = read.csv('mpg.csv')
View(data)
data = read.csv('mpg.csv', sep = ";")
data = read.csv('mpg.csv', sep = ";", stringsAsFactors = F)
colnames(df)
sapply(df,class)
# Importar
data = read.xlsx('mpg.xlsx', sheetName='HojaDatos')
df = read.csv('mpg.csv', sep = ";", stringsAsFactors = F)
head(df)
sapply(df,class)
## Convertir variables
data$horsepower <- as.numeric(as.character(data$horsepower))
data$horsepower <- as.factor(as.character(data$horsepower))
sapply(data,class)
View(df)
## Limpieza de Bases de datos
# Missing values
is.na.data.frame(df)
View(df)
# Importar
df = read.xlsx('mpg.xlsx', sheetName='HojaDatos',)
sapply(df,class)
# Importar
df = read.xlsx('mpg.xlsx', sheetName='HojaDatos', stringsAsFactors = F)
data = read.csv('mpg.csv', sep = ";", stringsAsFactors = F)
head(df)
sapply(df,class)
# Convertir variables
df$horsepower <- as.numeric(as.character(df$horsepower))
df$horsepower <- as.factor(as.character(df$horsepower))
## Limpieza de Bases de datos
# Missing values
is.na.data.frame(df)
View(df)
View(df)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetName='HojaDatos', stringsAsFactors = F)
## Limpieza de Bases de datos
# Missing values
df = read.csv('mpg_clean.csv', sheetName='HojaDatos', stringsAsFactors = F)
## Limpieza de Bases de datos
# Missing values
df = read.csv('mpg_clean.csv', stringsAsFactors = F)
list.files()
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetName='HojaDatos', stringsAsFactors = F)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', stringsAsFactors = F)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
sum(is.na.data.frame(df))
colSum(is.na.data.frame(df))
colsum(is.na.data.frame(df))
colSums(is.na.data.frame(df))
help("read.csv")
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F,na.strings = "na")
is.na.data.frame(df)
colSums(is.na.data.frame(df))
View(df)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F,na.strings = "--")
is.na.data.frame(df)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F,na = "--")
is.na.data.frame(df)
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F,na = "na")
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F,na.strings=c("na", "--", "n/a"))
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1,na.strings=c("na", "--", "n/a"))
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
colSums(is.na.data.frame(df))
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
colSums(is.na.data.frame(df))
sapply(df,class)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
sapply(df,class)
df
df[df=="\--"] <- NA
df
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="\--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
df
is.na.data.frame(df)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
df <- lapply(df[1:2], as.numeric)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
# Tratamiento: En R la clase de las columnas cambia, por ello hay que modificarla para que realicemos las interpolaciones
sapply(df,class)
df <- lapply(df[c(1,3,4,5,6,7,8)], as.numeric)
sapply(df,class)
## Limpieza de Bases de datos
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
# Tratamiento: En R la clase de las columnas cambia, por ello hay que modificarla para que realicemos las interpolaciones
sapply(df,class)
df[c(1,3,4,5,6,7,8)]<- lapply(df[c(1,3,4,5,6,7,8)], as.numeric)
sapply(df,class)
null1 = mean(df['displacement'])
help("mean")
null1 = mean(df['displacement'],na.rm=T)
null1 = mean(df['displacement'],na.rm=F)
View(df)
null1 = mean(df[,c('displacement')],na.rm=F)
null1 = mean(df[,c('displacement')])
null1
df[,c('displacement')]
mean(df[,c('displacement')])
null1 = mean(df[,c('displacement')], na.rm = TRUE)
help(mode)
null6 = mode(df[,c('origin')], na.rm = TRUE)
null6 = mode(df[,c('origin')])
null6
null6 = getmode(df[,c('origin')], na.rm = TRUE)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode
null6 = getmode(df[,c('origin')], na.rm = TRUE)
null6 = getmode(df[,c('origin')])
df$displacement[is.na(df$displacement)] <- null1
df$displacement
colnames(df)
null4 = mean(df[,c('model.year')], na.rm = TRUE)
df$displacement[is.na(df$horsepower)] <- null2
df$displacement[is.na(df$weight)] <- null3
df$displacement[is.na(df$model.year)] <- null4
# Missing values
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
# Tratamiento: En R la clase de las columnas cambia, por ello hay que modificarla para que realicemos las interpolaciones
sapply(df,class)
df[c(1,3,4,5,6,7,8)]<- lapply(df[c(1,3,4,5,6,7,8)], as.numeric)
sapply(df,class)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
null1 = mean(df[,c('displacement')], na.rm = TRUE)
null2 = median(df[,c('horsepower')], na.rm = TRUE)
null3 = median(df[,c('weight')], na.rm = TRUE)
null4 = mean(df[,c('model.year')], na.rm = TRUE)
null5 = median(df[,c('acceleration')], na.rm = TRUE)
null6 = getmode(df[,c('origin')])
df$displacement[is.na(df$displacement)] <- null1
df$displacement[is.na(df$horsepower)] <- null2
df$displacement[is.na(df$weight)] <- null3
df$displacement[is.na(df$model.year)] <- null4
df$displacement[is.na(df$acceleration)] <- null5
df$displacement[is.na(df$origin)] <- null6
colSums(is.na.data.frame(df))
df = read.xlsx('mpg_clean.xlsx', sheetIndex = 1, stringsAsFactors = F)
is.na.data.frame(df)
colSums(is.na.data.frame(df))
# Identificar los missing values
df[df=="na"] <- NA
df[df=="--"] <- NA
df[df=="n/a"] <- NA
df[df=="NaN"] <- NA
colSums(is.na.data.frame(df))
# Tratamiento: En R la clase de las columnas cambia, por ello hay que modificarla para que realicemos las interpolaciones
sapply(df,class)
df[c(1,3,4,5,6,7,8)]<- lapply(df[c(1,3,4,5,6,7,8)], as.numeric)
sapply(df,class)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
null1 = mean(df[,c('displacement')], na.rm = TRUE)
null2 = median(df[,c('horsepower')], na.rm = TRUE)
null3 = median(df[,c('weight')], na.rm = TRUE)
null4 = mean(df[,c('model.year')], na.rm = TRUE)
null5 = median(df[,c('acceleration')], na.rm = TRUE)
null6 = getmode(df[,c('origin')])
df$displacement[is.na(df$displacement)] <- null1
df$horsepower[is.na(df$horsepower)] <- null2
df$weight[is.na(df$weight)] <- null3
df$model.year[is.na(df$model.year)] <- null4
df$acceleration[is.na(df$acceleration)] <- null5
df$origin[is.na(df$origin)] <- null6
colSums(is.na.data.frame(df))
## Consultas
df$cylinders <- as.character(gsub("[[:alpha:]]","",df$cylinders))
View(df)
View(df)
df[-c(19,25),]
df <- df[-c(19,25),]
df$cylinders <- as.numeric(
as.character(
gsub("[[:alpha:]]","",df$cylinders
)
)
)
summary(df)
unique(df$car.name)
as.character(gsub(""\"","",df$car.name)
(gsub("[:punct:]","",df$car.name)
)
(gsub(""\\"","",df$car.name)
(gsub("\"","",df$car.name)
)
df$car.name<- as.character(gsub("\"","",df$car.name))
unique(df$car.name)
library(dplyr)
help("arrange")
# Ordenar
arrange(df,model.year)
# Ordenar
arrange(df,origin)
# Ordenar
arrange(df,car.name)
# Eliminar duplicados
distinct(df)
# Eliminar duplicados
df <- distinct(df)
df2 <- distinct(df,mpg)
View(df2)
df2 <- distinct(df,mpg,.keep_all= TRUE)
View(df2)
source('~/.active-rstudio-document')
sapply(df, function(x) length(unique(x)))
df = read.excel('mpg.xlsx',sheetName ='HojaDatos')
df = read.xlsx('mpg.xlsx',sheetName ='HojaDatos')
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:398,]
# Separar en columnas
df3 = df[0:10,c(0,1,2,3,4,8)]
df4 = df[0:13,c(5,6,7,8)]
df5 = rbind(df1,df2)
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:398,]
View(df5)
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:301,]
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:298,]
# Separar en columnas
df3 = df[0:10,c(0,1,2,3,4,8)]
df4 = df[0:13,c(5,6,7,8)]
df5 = rbind(df1,df2)
help(append())
help(append
)
df5 = append(df1,df2)
View(df5)
df5 = rbind(df1,df2)
help("rbind")
help("merge")
union1 = merge(df3, df4, by = "car.names" )
colnames(df3)
# Separar en columnas
df3 = df[0:10,c(1,2,3,4,9)]
df4 = df[0:13,c(5,6,7,8,9)]
df5 = rbind(df1,df2)
union1 = merge(df3, df4, by = "car.names" )
colnames(df3)
colnames(df4)
df3
df4
sapply(df5, function(x) length(unique(x)))
sapply(df4, function(x) length(unique(x)))
sapply(df3, function(x) length(unique(x)))
union1 = merge(df3, df4, by = "car.names" )
# FULL OUTER JOIN
union1 = merge(df3, df4, by = "car.names", all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "car.names", all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = car.names, all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by.x = "car.names", all = TRUE)
sapply(df4, class)
df = read.xlsx('mpg.xlsx',sheetName ='HojaDatos', stringAsfactor = F)
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:298,]
# Separar en columnas
df3 = df[0:10,c(1,2,3,4,9)]
df4 = df[0:13,c(5,6,7,8,9)]
df5 = rbind(df1,df2)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by.x = "car.names", all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "car.names", all = TRUE)
sapply(df4, class)
df = read.xlsx('mpg.xlsx',sheetName ='HojaDatos', stringAsfactor = F)
sapply(df, class)
df = read.xlsx('mpg.xlsx',sheetName ='HojaDatos', stringsAsFactors = F)
# Separar en subconjuntos de índices
df1 = df[0:199,]
df2 = df[200:298,]
# Separar en columnas
df3 = df[0:10,c(1,2,3,4,9)]
df4 = df[0:13,c(5,6,7,8,9)]
sapply(df, class)
sapply(df4, class)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "car.names", all = TRUE)
sapply(df3, class)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "mpg", all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by.x='car.names', by.y='car.names', all = TRUE)
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authorN <- within(authors, { name <- surname; rm(surname) })
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
View(authors)
View(books)
m1 <- merge(df3, df4, by.x = "car.name", by.y = "car.name")
rm(autors, authorN, books)
rm(authors, authorN, books)
union1 <- merge(df3, df4, by.x = "car.name", by.y = "car.name")
union1 <- merge(df3, df4, by = "car.name")
union1 <- merge(df3, df4, by = "car.name", all = TRUE)
View(union1)
union1 = merge(x = df3, y = df4, by.x='car.names', by.y='car.names', all = TRUE)
union1 <- merge(df3, df4, by = "car.name", all = TRUE)
union1 = merge(df3, df4, by = "car.name", all = TRUE)
# LEFT JOIN
union2 = merge(df3, df4, by = "car.name", all.x = TRUE)
# RIGHT JOIN
union3 = merge(df3, df4, by = "car.name", all.y = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "car.name", all = TRUE)
# FULL OUTER JOIN
union1 = merge(x = df3, y = df4, by = "car.name", all = TRUE)
# LEFT JOIN
union2 = merge(x = df3, y = df4, by = "car.name", all.x = TRUE)
# RIGHT JOIN
union3 = merge(x = df3, y = df4, by = "car.name", all.y = TRUE)
# INNER JOIN
union4 = merge(x = df3, y = df4, by = "car.name", all.x = TRUE, all.y = TRU)
# INNER JOIN
union4 = merge(x = df3, y = df4, by = "car.name", all.x = TRUE, all.y = TRUE)
# CROSS
union5 = merge(x = df3, dy = f4, by = NULL)
# CROSS
union5 = merge(x = df3, y = df4, by = NULL)
View(union5)
View(union1)
# INNER JOIN
union4 = merge(x = df3, y = df4, by = "car.name")
